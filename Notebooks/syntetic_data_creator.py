# -*- coding: utf-8 -*-
"""Prodject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CZgI-c0AHN0kgV4lvrOWXICLbIATQMhl
"""

from google.colab import drive
drive.mount('/content/drive')

folder_path = '/content/drive/MyDrive/Prodject_4630/Raw_Image_Data'

import glob
import random
from pathlib import Path

import matplotlib.pyplot as plt
from PIL import Image

# 1. Hent alle bildefiler (PNG, JPG, JPEG, BMP, TIFF) i mappen
img_extensions = ("*.png", "*.jpg", "*.jpeg", "*.bmp", "*.tif", "*.tiff")
image_files = []
for ext in img_extensions:
    image_files.extend(Path(folder_path).glob(ext))

# 2. Velg inntil 12 bilder (første 12 sortert alfabetisk – bytt gjerne til random.sample)
n_images = 12
if len(image_files) < n_images:
    raise ValueError(
        f"Kun {len(image_files)} bildefiler funnet i «{folder_path}». "
        f"Legg til flere eller reduser n_images."
    )

selected_files = random.sample(image_files, n_images)
# ‑‑ alternativ: random.sample(image_files, n_images)

# 3. Visualiser i et 3×4‑grid
rows, cols = 3, 4
fig, axes = plt.subplots(rows, cols, figsize=(15, 10), constrained_layout=True)

for ax, img_path in zip(axes.flatten(), selected_files):
    img = Image.open(img_path)
    ax.imshow(img)
    ax.set_title(img_path.name, fontsize=8)
    ax.axis("off")

# Hvis du ønsker å lagre kollasjen som bilde:
# fig.savefig('/content/drive/MyDrive/collage_preview.png', dpi=150)

plt.show()

import cv2
import numpy as np
import os

def add_motion_blur(img, degree = 10, angle = 0):
  M=cv2.getRotationMatrix2D((degree/2,degree/2), angle,1)
  kernel = np.diag(np.ones(degree))
  kernel = cv2.warpAffine(kernel,M,(degree,degree))
  kernel = kernel / degree
  return cv2.filter2D(img, -1, kernel)

def add_gaussian_blur(img, ksize=5):
    return cv2.GaussianBlur(img, (ksize,ksize),2)

def add_noise(img):
    noise = np.random.normal(0,15,img.shape).astype(np.uint8)
    return cv2.add(img,noise)

def change_exposure(img, factor = 0.5):
    enhanceer = ImageEnhance.Brightness(Image.fromarray(img))
    return np.array(enhanceer.enhance(factor))

def create_burst_sequence(folder_path, output_dir, burst_length = 5):

  folder_path = Path(folder_path)
  output_dir = Path(output_dir)
  output_dir.mkdir(exist_ok=True)

  image_files = sorted ([f for f in folder_path.iterdir()])

  for idx, img_path in enumerate(image_files,start=1):
    subfolder = output_dir / f"{idx:03d}"
    subfolder.mkdir(exist_ok=True)

    img = cv2.imread(str(img_path))

    base_name = img_path.stem
    sharp_name = subfolder / f"{base_name}_sharp.jpg"
    cv2.imwrite(str(sharp_name),img)

    for i in range (burst_length - 1):
      variant = img.copy()
      effect = random.choice(['motion','gauss','noise','exposure'])

      if effect == 'motion':
        variant = add_motion_blur(variant, degree = random.randint(5,15), angle = random.randint(0,180))
      elif effect == 'gauss':
        variant = add_gaussian_blur(variant, ksize=random.choice([3,5,7]))
      elif effect == 'noise':
        variant = add_noise(variant)
      else:
        variant = change_exposure(variant, factor = random.uniform(0.4,1.2))

      cv2.imwrite(str(subfolder / f"{base_name}_degreaded_{i}.jpg"),variant)

import shutil
def clear_folder(folder_path):
  folder_path = Path(folder_path)

  if not folder_path.is_dir():
        raise ValueError(f"{folder_path} is not an existing directory")

  for item in folder_path.iterdir():
    try:
      if item.is_file() or item.is_symlink():
        item.unlink()               # remove file or link
      else:                           # directory
        shutil.rmtree(item)         # recursively delete sub-tree
    except Exception as e:
        print(f"⚠️  Could not remove {item}: {e}")

import json
def generate_pairwise_labels(burst_folder_root, output_json = "pairwise_labels.json"):
  output_json = burst_folder_root + output_json
  burst_folder_root = Path(burst_folder_root)
  all_pairs = []

  for burst_folder in sorted(burst_folder_root.iterdir()):
      if burst_folder.is_dir():
          image_files = sorted(burst_folder.glob('*.jpg'))

          sharp_img = None
          degraded_imgs = []
          for img_path in image_files:
              if 'sharp' in img_path.name:
                  sharp_img = str(img_path.relative_to(burst_folder_root))

              elif 'degreaded' in img_path.name:
                  degraded_imgs.append(str(img_path.relative_to(burst_folder_root)))

          if sharp_img is None or len(degraded_imgs) == 0:
            print(f"Skipping {burst_folder.name} - Missing sharp or degraded images")
            continue

          for degraded_img in degraded_imgs:
            all_pairs.append({
                "burst": burst_folder.name,
                "frame_a": sharp_img,
                "frame_b": degraded_img,
                "label": 1
            })

  with open (output_json, 'w') as f:
    json.dump(all_pairs,f, indent = 2)

  print(f"Wrote {len(all_pairs)} pairs to {output_json}")

folder_path = '/content/drive/MyDrive/Prodject_4630/Raw_Image_Data'
output_path = '/content/drive/MyDrive/Prodject_4630/Syntetic_Data/Images'
root_path = '/content/drive/MyDrive/Prodject_4630/Syntetic_Data'
clear_folder(output_path)

create_burst_sequence(folder_path,output_path)

root_path = '/content/drive/MyDrive/Prodject_4630/Syntetic_Data'
generate_pairwise_labels(output_path)